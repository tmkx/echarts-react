import {
  Brush,
  Calendar,
  EffectScatterChart,
  GraphChart,
  HeatmapChart,
  Legend,
  MarkArea,
  MarkLine,
  MarkPoint,
  Polar,
  ScatterChart,
  SingleAxis,
  Title,
  Toolbox,
  Tooltip,
  VisualMap,
  echarts,
} from '@fanciers/echarts-react';
import type { Meta, StoryObj } from '@storybook/react';
import type { ScatterSeriesOption, SingleAxisComponentOption, TitleComponentOption } from 'echarts';
import { ScatterJitter as EChartScatterJitter } from 'echarts/features';
import type { OptionDataValue } from 'echarts/types/src/util/types.js';
import React from 'react';

const meta = {
  title: 'Scatter',
} satisfies Meta;

export default meta;

export type Story = StoryObj<typeof meta>;

export const ScatterSimple: Story = {
  name: 'Basic Scatter Chart',
  render() {
    return (
      <ScatterChart
        style={{ width: 480, height: 300 }}
        xAxis={{}}
        yAxis={{}}
        series={[
          {
            symbolSize: 20,
            // prettier-ignore
            data: [[10.0, 8.04], [8.07, 6.95], [13.0, 7.58], [9.05, 8.81], [11.0, 8.33], [14.0, 7.66], [13.4, 6.81], [10.0, 6.33], [14.0, 8.96], [12.5, 6.82], [9.15, 7.2], [11.5, 7.2], [3.03, 4.23], [12.2, 7.83], [2.02, 4.47], [1.05, 3.33], [4.05, 4.96], [6.03, 7.24], [12.0, 6.26], [12.0, 8.84], [7.08, 5.82], [5.02, 5.68]],
            type: 'scatter',
          },
        ]}
      />
    );
  },
};

export const ScatterAnscombeQuartet: Story = {
  name: "Anscomb's quartet",
  render() {
    const dataAll = [
      // prettier-ignore
      [[10.0, 8.04], [8.0, 6.95], [13.0, 7.58], [9.0, 8.81], [11.0, 8.33], [14.0, 9.96], [6.0, 7.24], [4.0, 4.26], [12.0, 10.84], [7.0, 4.82], [5.0, 5.68]],
      // prettier-ignore
      [[10.0, 9.14], [8.0, 8.14], [13.0, 8.74], [9.0, 8.77], [11.0, 9.26], [14.0, 8.1], [6.0, 6.13], [4.0, 3.1], [12.0, 9.13], [7.0, 7.26], [5.0, 4.74]],
      // prettier-ignore
      [[10.0, 7.46], [8.0, 6.77], [13.0, 12.74], [9.0, 7.11], [11.0, 7.81], [14.0, 8.84], [6.0, 6.08], [4.0, 5.39], [12.0, 8.15], [7.0, 6.42], [5.0, 5.73]],
      // prettier-ignore
      [[8.0, 6.58], [8.0, 5.76], [8.0, 7.71], [8.0, 8.84], [8.0, 8.47], [8.0, 7.04], [8.0, 5.25], [19.0, 12.5], [8.0, 5.56], [8.0, 7.91], [8.0, 6.89]],
    ];

    const markLineOpt: ScatterSeriesOption['markLine'] = {
      animation: false,
      label: { formatter: 'y = 0.5 * x + 3', align: 'right' },
      lineStyle: { type: 'solid' },
      tooltip: { formatter: 'y = 0.5 * x + 3' },
      data: [
        [
          { coord: [0, 3], symbol: 'none' },
          { coord: [20, 13], symbol: 'none' },
        ],
      ],
    };

    return (
      <ScatterChart
        style={{ width: 480, height: 300 }}
        grid={[
          { left: '7%', top: '7%', width: '38%', height: '38%' },
          { right: '7%', top: '7%', width: '38%', height: '38%' },
          { left: '7%', bottom: '7%', width: '38%', height: '38%' },
          { right: '7%', bottom: '7%', width: '38%', height: '38%' },
        ]}
        xAxis={[
          { gridIndex: 0, min: 0, max: 20 },
          { gridIndex: 1, min: 0, max: 20 },
          { gridIndex: 2, min: 0, max: 20 },
          { gridIndex: 3, min: 0, max: 20 },
        ]}
        yAxis={[
          { gridIndex: 0, min: 0, max: 15 },
          { gridIndex: 1, min: 0, max: 15 },
          { gridIndex: 2, min: 0, max: 15 },
          { gridIndex: 3, min: 0, max: 15 },
        ]}
        series={[
          { name: 'I', type: 'scatter', xAxisIndex: 0, yAxisIndex: 0, data: dataAll[0]!, markLine: markLineOpt },
          { name: 'II', type: 'scatter', xAxisIndex: 1, yAxisIndex: 1, data: dataAll[1]!, markLine: markLineOpt },
          { name: 'III', type: 'scatter', xAxisIndex: 2, yAxisIndex: 2, data: dataAll[2]!, markLine: markLineOpt },
          { name: 'IV', type: 'scatter', xAxisIndex: 3, yAxisIndex: 3, data: dataAll[3]!, markLine: markLineOpt },
        ]}
      >
        <Title title={{ text: "Anscombe's quartet", left: 'center', top: 0 }} />
        <Tooltip tooltip={{ formatter: 'Group {a}: ({c})' }} />
        <MarkLine />
      </ScatterChart>
    );
  },
};

export const ScatterEffect: Story = {
  name: 'Effect Scatter Chart',
  render() {
    return (
      <ScatterChart
        compose={[EffectScatterChart]}
        style={{ width: 480, height: 300 }}
        xAxis={{ scale: true }}
        yAxis={{ scale: true }}
        series={[
          {
            type: 'effectScatter',
            symbolSize: 20,
            data: [
              [172.7, 105.2],
              [153.4, 42],
            ],
          },
          {
            type: 'scatter',
            // prettier-ignore
            data: [
              [161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],
              [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],
              [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],
              [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],
              [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],
              [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],
              [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],
              [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],
              [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],
              [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],
              [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],
              [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],
              [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],
              [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],
              [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],
              [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],
              [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],
              [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],
              [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],
              [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],
              [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],
              [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],
              [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],
              [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],
              [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],
              [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4],
              [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5],
              [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5],
              [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2],
              [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2],
              [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3],
              [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5],
              [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4],
              [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6],
              [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8],
              [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1],
              [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5],
              [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2],
              [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6],
              [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0],
              [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0],
              [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9],
              [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1],
              [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4],
              [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7],
              [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5],
              [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8],
              [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0],
              [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9],
              [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6],
              [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8],
              [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3]
            ],
          },
        ]}
      />
    );
  },
};

export const ScatterJitter: Story = {
  name: 'Scatter with Jittering',
  render() {
    const WIDTH = 480;
    const grid = { left: 80, right: 50 };
    const width = WIDTH - grid.left - grid.right;
    const data = React.useMemo(() => {
      const data: number[][] = [];
      for (let day = 0; day < 7; ++day) {
        for (let i = 0; i < 1000; ++i) {
          const y = Math.tan(i) / 2 + 7;
          data.push([day, y, Math.random()]);
        }
      }
      return data;
    }, []);
    return (
      <ScatterChart
        use={EChartScatterJitter}
        style={{ width: WIDTH, height: 300 }}
        grid={grid}
        xAxis={{ type: 'category', jitter: (width / 7) * 0.8, data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] }}
        yAxis={{ type: 'value', min: 0, max: 10 }}
        series={[{ name: 'Sleeping Hours', type: 'scatter', data, colorBy: 'data', itemStyle: { opacity: 0.4 } }]}
      >
        <Title title={{ text: 'Scatter with Jittering' }} />
      </ScatterChart>
    );
  },
};

export const ScatterPunchCard: Story = {
  name: 'Punch Card of GitHub',
  render() {
    // prettier-ignore
    const hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a', '9a', '10a', '11a', '12p', '1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p', '10p', '11p'];
    // prettier-ignore
    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];
    // prettier-ignore
    const data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]]
      .map((item): [number, number, number] => [item[1]!, item[0]!, item[2]!]);

    return (
      <ScatterChart
        style={{ width: 480, height: 300 }}
        grid={{ left: 2, bottom: 10, right: 10, containLabel: true }}
        xAxis={{
          type: 'category',
          data: hours,
          boundaryGap: false,
          splitLine: { show: true },
          axisLine: { show: false },
        }}
        yAxis={{ type: 'category', data: days, axisLine: { show: false } }}
        series={[
          {
            name: 'Punch Card',
            type: 'scatter',
            symbolSize: (val) => val[2] * 2,
            data,
            animationDelay: (idx) => idx * 5,
          },
        ]}
      >
        <Title title={{ text: 'Punch Card of GitHub' }} />
        <Legend legend={{ data: ['Punch Card'], left: 'right' }} />
        <Tooltip
          tooltip={{
            position: 'top',
            formatter(params) {
              const value = (params as any).value as (typeof data)[number];
              return value[2] + ' commits in ' + hours[value[0]] + ' of ' + days[value[1]];
            },
          }}
        />
      </ScatterChart>
    );
  },
};

export const ScatterSingleAxis: Story = {
  name: 'Scatter on Single Axis',
  render() {
    // prettier-ignore
    const hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a', '9a', '10a', '11a', '12p', '1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p', '10p', '11p'];
    // prettier-ignore
    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];
    // prettier-ignore
    const data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];

    const title: TitleComponentOption[] = [];
    const singleAxis: SingleAxisComponentOption[] = [];
    const series: ScatterSeriesOption[] = [];
    days.forEach(function (day, idx) {
      title.push({ textBaseline: 'middle', top: ((idx + 0.5) * 100) / 7 + '%', text: day });
      singleAxis.push({
        left: 150,
        type: 'category',
        boundaryGap: false,
        data: hours,
        top: (idx * 100) / 7 + 5 + '%',
        height: 100 / 7 - 10 + '%',
        axisLabel: { interval: 2 },
      });
      series.push({
        singleAxisIndex: idx,
        coordinateSystem: 'singleAxis',
        type: 'scatter',
        data: [],
        symbolSize: (dataItem) => dataItem[1] * 4,
      });
    });
    data.forEach(function (dataItem) {
      (series[dataItem[0]!]!.data as OptionDataValue[][])!.push([dataItem[1], dataItem[2]]);
    });

    return (
      <ScatterChart style={{ width: 480, height: 400 }} series={series}>
        <Title title={title} />
        <SingleAxis singleAxis={singleAxis} />
        <Legend legend={{ data: ['Punch Card'], left: 'right' }} />
        <Tooltip tooltip={{ position: 'top' }} />
      </ScatterChart>
    );
  },
};

export const ScatterWeight: Story = {
  name: 'Distribution of Height and Weight',
  render() {
    return (
      <ScatterChart
        style={{ width: 600, height: 500 }}
        grid={{ left: '3%', right: '7%', bottom: '7%', containLabel: true }}
        xAxis={[{ type: 'value', scale: true, axisLabel: { formatter: '{value} cm' }, splitLine: { show: false } }]}
        yAxis={[{ type: 'value', scale: true, axisLabel: { formatter: '{value} kg' }, splitLine: { show: false } }]}
        series={[
          {
            name: 'Female',
            type: 'scatter',
            emphasis: { focus: 'series' },
            // prettier-ignore
            data: [
              [161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],
              [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],
              [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],
              [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],
              [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],
              [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],
              [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],
              [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],
              [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],
              [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],
              [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],
              [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],
              [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],
              [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],
              [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],
              [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],
              [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],
              [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],
              [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],
              [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],
              [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],
              [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],
              [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],
              [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],
              [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],
              [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4],
              [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5],
              [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5],
              [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2],
              [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2],
              [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3],
              [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5],
              [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4],
              [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6],
              [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8],
              [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1],
              [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5],
              [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2],
              [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6],
              [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0],
              [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0],
              [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9],
              [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1],
              [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4],
              [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7],
              [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5],
              [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8],
              [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0],
              [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9],
              [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6],
              [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8],
              [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3]
            ],
            markArea: {
              silent: true,
              itemStyle: { color: 'transparent', borderWidth: 1, borderType: 'dashed' },
              data: [
                [
                  { name: 'Female Data Range', xAxis: 'min', yAxis: 'min' },
                  { xAxis: 'max', yAxis: 'max' },
                ],
              ],
            },
            markPoint: {
              data: [
                { type: 'max', name: 'Max' },
                { type: 'min', name: 'Min' },
              ],
            },
            markLine: { lineStyle: { type: 'solid' }, data: [{ type: 'average', name: 'AVG' }, { xAxis: 160 }] },
          },
          {
            name: 'Male',
            type: 'scatter',
            emphasis: { focus: 'series' },
            // prettier-ignore
            data: [
              [174.0, 65.6], [175.3, 71.8], [193.5, 80.7], [186.5, 72.6], [187.2, 78.8],
              [181.5, 74.8], [184.0, 86.4], [184.5, 78.4], [175.0, 62.0], [184.0, 81.6],
              [180.0, 76.6], [177.8, 83.6], [192.0, 90.0], [176.0, 74.6], [174.0, 71.0],
              [184.0, 79.6], [192.7, 93.8], [171.5, 70.0], [173.0, 72.4], [176.0, 85.9],
              [176.0, 78.8], [180.5, 77.8], [172.7, 66.2], [176.0, 86.4], [173.5, 81.8],
              [178.0, 89.6], [180.3, 82.8], [180.3, 76.4], [164.5, 63.2], [173.0, 60.9],
              [183.5, 74.8], [175.5, 70.0], [188.0, 72.4], [189.2, 84.1], [172.8, 69.1],
              [170.0, 59.5], [182.0, 67.2], [170.0, 61.3], [177.8, 68.6], [184.2, 80.1],
              [186.7, 87.8], [171.4, 84.7], [172.7, 73.4], [175.3, 72.1], [180.3, 82.6],
              [182.9, 88.7], [188.0, 84.1], [177.2, 94.1], [172.1, 74.9], [167.0, 59.1],
              [169.5, 75.6], [174.0, 86.2], [172.7, 75.3], [182.2, 87.1], [164.1, 55.2],
              [163.0, 57.0], [171.5, 61.4], [184.2, 76.8], [174.0, 86.8], [174.0, 72.2],
              [177.0, 71.6], [186.0, 84.8], [167.0, 68.2], [171.8, 66.1], [182.0, 72.0],
              [167.0, 64.6], [177.8, 74.8], [164.5, 70.0], [192.0, 101.6], [175.5, 63.2],
              [171.2, 79.1], [181.6, 78.9], [167.4, 67.7], [181.1, 66.0], [177.0, 68.2],
              [174.5, 63.9], [177.5, 72.0], [170.5, 56.8], [182.4, 74.5], [197.1, 90.9],
              [180.1, 93.0], [175.5, 80.9], [180.6, 72.7], [184.4, 68.0], [175.5, 70.9],
              [180.6, 72.5], [177.0, 72.5], [177.1, 83.4], [181.6, 75.5], [176.5, 73.0],
              [175.0, 70.2], [174.0, 73.4], [165.1, 70.5], [177.0, 68.9], [192.0, 102.3],
              [176.5, 68.4], [169.4, 65.9], [182.1, 75.7], [179.8, 84.5], [175.3, 87.7],
              [184.9, 86.4], [177.3, 73.2], [167.4, 53.9], [178.1, 72.0], [168.9, 55.5],
              [157.2, 58.4], [180.3, 83.2], [170.2, 72.7], [177.8, 64.1], [172.7, 72.3],
              [165.1, 65.0], [186.7, 86.4], [165.1, 65.0], [174.0, 88.6], [175.3, 84.1],
              [185.4, 66.8], [177.8, 75.5], [180.3, 93.2], [180.3, 82.7], [177.8, 58.0],
              [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 116.4], [163.8, 72.2],
              [188.0, 83.6], [198.1, 85.5], [175.3, 90.9], [166.4, 85.9], [190.5, 89.1],
              [166.4, 75.0], [177.8, 77.7], [179.7, 86.4], [172.7, 90.9], [190.5, 73.6],
              [185.4, 76.4], [168.9, 69.1], [167.6, 84.5], [175.3, 64.5], [170.2, 69.1],
              [190.5, 108.6], [177.8, 86.4], [190.5, 80.9], [177.8, 87.7], [184.2, 94.5],
              [176.5, 80.2], [177.8, 72.0], [180.3, 71.4], [171.4, 72.7], [172.7, 84.1],
              [172.7, 76.8], [177.8, 63.6], [177.8, 80.9], [182.9, 80.9], [170.2, 85.5],
              [167.6, 68.6], [175.3, 67.7], [165.1, 66.4], [185.4, 102.3], [181.6, 70.5],
              [172.7, 95.9], [190.5, 84.1], [179.1, 87.3], [175.3, 71.8], [170.2, 65.9],
              [193.0, 95.9], [171.4, 91.4], [177.8, 81.8], [177.8, 96.8], [167.6, 69.1],
              [167.6, 82.7], [180.3, 75.5], [182.9, 79.5], [176.5, 73.6], [186.7, 91.8],
              [188.0, 84.1], [188.0, 85.9], [177.8, 81.8], [174.0, 82.5], [177.8, 80.5],
              [171.4, 70.0], [185.4, 81.8], [185.4, 84.1], [188.0, 90.5], [188.0, 91.4],
              [182.9, 89.1], [176.5, 85.0], [175.3, 69.1], [175.3, 73.6], [188.0, 80.5],
              [188.0, 82.7], [175.3, 86.4], [170.5, 67.7], [179.1, 92.7], [177.8, 93.6],
              [175.3, 70.9], [182.9, 75.0], [170.8, 93.2], [188.0, 93.2], [180.3, 77.7],
              [177.8, 61.4], [185.4, 94.1], [168.9, 75.0], [185.4, 83.6], [180.3, 85.5],
              [174.0, 73.9], [167.6, 66.8], [182.9, 87.3], [160.0, 72.3], [180.3, 88.6],
              [167.6, 75.5], [186.7, 101.4], [175.3, 91.1], [175.3, 67.3], [175.9, 77.7],
              [175.3, 81.8], [179.1, 75.5], [181.6, 84.5], [177.8, 76.6], [182.9, 85.0],
              [177.8, 102.5], [184.2, 77.3], [179.1, 71.8], [176.5, 87.9], [188.0, 94.3],
              [174.0, 70.9], [167.6, 64.5], [170.2, 77.3], [167.6, 72.3], [188.0, 87.3],
              [174.0, 80.0], [176.5, 82.3], [180.3, 73.6], [167.6, 74.1], [188.0, 85.9],
              [180.3, 73.2], [167.6, 76.3], [183.0, 65.9], [183.0, 90.9], [179.1, 89.1],
              [170.2, 62.3], [177.8, 82.7], [179.1, 79.1], [190.5, 98.2], [177.8, 84.1],
              [180.3, 83.2], [180.3, 83.2]
            ],
            markArea: {
              silent: true,
              itemStyle: { color: 'transparent', borderWidth: 1, borderType: 'dashed' },
              data: [
                [
                  { name: 'Male Data Range', xAxis: 'min', yAxis: 'min' },
                  { xAxis: 'max', yAxis: 'max' },
                ],
              ],
            },
            markPoint: {
              data: [
                { type: 'max', name: 'Max' },
                { type: 'min', name: 'Min' },
              ],
            },
            markLine: { lineStyle: { type: 'solid' }, data: [{ type: 'average', name: 'Average' }, { xAxis: 170 }] },
          },
        ]}
      >
        <Title title={{ text: 'Male and female height and weight distribution', subtext: 'Data from: Heinz 2003' }} />
        <Tooltip
          tooltip={{
            showDelay: 0,
            formatter(params: any) {
              if (params.value.length > 1) {
                return params.seriesName + ' :<br/>' + params.value[0] + 'cm ' + params.value[1] + 'kg ';
              } else {
                return params.seriesName + ' :<br/>' + params.name + ' : ' + params.value + 'kg ';
              }
            },
            axisPointer: { show: true, type: 'cross', lineStyle: { type: 'dashed', width: 1 } },
          }}
        />
        <Toolbox toolbox={{ feature: { dataZoom: {}, brush: { type: ['rect', 'polygon', 'clear'] } } }} />
        <Brush brush={{}} />
        <Legend legend={{ data: ['Female', 'Male'], left: 'center', bottom: 10 }} />
        <MarkArea />
        <MarkPoint />
        <MarkLine />
      </ScatterChart>
    );
  },
};

export const ScatterLabelAlignRight: Story = {
  name: 'Align Label on the Right',
  render() {
    const WIDTH = 480;
    // prettier-ignore
    const data = [
      [[28604, 77, 17096869, 'Australia', 1990], [31163, 77.4, 27662440, 'Canada', 1990], [1516, 68, 1154605773, 'China', 1990], [13670, 74.7, 10582082, 'Cuba', 1990], [28599, 75, 4986705, 'Finland', 1990], [29476, 77.1, 56943299, 'France', 1990], [31476, 75.4, 78958237, 'Germany', 1990], [28666, 78.1, 254830, 'Iceland', 1990], [1777, 57.7, 870601776, 'India', 1990], [29550, 79.1, 122249285, 'Japan', 1990], [2076, 67.9, 20194354, 'North Korea', 1990], [12087, 72, 42972254, 'South Korea', 1990], [24021, 75.4, 3397534, 'New Zealand', 1990], [43296, 76.8, 4240375, 'Norway', 1990], [10088, 70.8, 38195258, 'Poland', 1990], [19349, 69.6, 147568552, 'Russia', 1990], [10670, 67.3, 53994605, 'Turkey', 1990], [26424, 75.7, 57110117, 'United Kingdom', 1990], [37062, 75.4, 252847810, 'United States', 1990]],
      [[44056, 81.8, 23968973, 'Australia', 2015], [43294, 81.7, 35939927, 'Canada', 2015], [13334, 76.9, 1376048943, 'China', 2015], [21291, 78.5, 11389562, 'Cuba', 2015], [38923, 80.8, 5503457, 'Finland', 2015], [37599, 81.9, 64395345, 'France', 2015], [44053, 81.1, 80688545, 'Germany', 2015], [42182, 82.8, 329425, 'Iceland', 2015], [5903, 66.8, 1311050527, 'India', 2015], [36162, 83.5, 126573481, 'Japan', 2015], [1390, 71.4, 25155317, 'North Korea', 2015], [34644, 80.7, 50293439, 'South Korea', 2015], [34186, 80.6, 4528526, 'New Zealand', 2015], [64304, 81.6, 5210967, 'Norway', 2015], [24787, 77.3, 38611794, 'Poland', 2015], [23038, 73.13, 143456918, 'Russia', 2015], [19360, 76.5, 78665830, 'Turkey', 2015], [38225, 81.4, 64715810, 'United Kingdom', 2015], [53354, 79.1, 321773631, 'United States', 2015]]
    ];
    return (
      <ScatterChart
        style={{ width: WIDTH, height: 300 }}
        xAxis={{ splitLine: { show: false } }}
        yAxis={{ splitLine: { show: false }, scale: true }}
        grid={{ left: 40, right: 130 }}
        series={[
          {
            name: '1990',
            data: data[0]!,
            type: 'scatter',
            symbolSize: (data) => Math.sqrt(data[2]) / 5e2,
            emphasis: { focus: 'self' },
            labelLayout: () => ({ x: WIDTH - 100, moveOverlap: 'shiftY' }),
            labelLine: { show: true, length2: 5, lineStyle: { color: '#bbb' } },
            label: { show: true, formatter: (param: any) => param.data[3], position: 'right', minMargin: 2 },
          },
        ]}
      />
    );
  },
};

export const ScatterLabelAlignTop: Story = {
  name: 'Align Label on the Top',
  render() {
    const WIDTH = 480;
    // prettier-ignore
    const data = [
      [[28604, 77, 17096869, 'Australia', 1990], [31163, 77.4, 27662440, 'Canada', 1990], [1516, 68, 1154605773, 'China', 1990], [13670, 74.7, 10582082, 'Cuba', 1990], [28599, 75, 4986705, 'Finland', 1990], [29476, 77.1, 56943299, 'France', 1990], [31476, 75.4, 78958237, 'Germany', 1990], [28666, 78.1, 254830, 'Iceland', 1990], [1777, 57.7, 870601776, 'India', 1990], [29550, 79.1, 122249285, 'Japan', 1990], [2076, 67.9, 20194354, 'North Korea', 1990], [12087, 72, 42972254, 'South Korea', 1990], [24021, 75.4, 3397534, 'New Zealand', 1990], [43296, 76.8, 4240375, 'Norway', 1990], [10088, 70.8, 38195258, 'Poland', 1990], [19349, 69.6, 147568552, 'Russia', 1990], [10670, 67.3, 53994605, 'Turkey', 1990], [26424, 75.7, 57110117, 'United Kingdom', 1990], [37062, 75.4, 252847810, 'United States', 1990]],
      [[44056, 81.8, 23968973, 'Australia', 2015], [43294, 81.7, 35939927, 'Canada', 2015], [13334, 76.9, 1376048943, 'China', 2015], [21291, 78.5, 11389562, 'Cuba', 2015], [38923, 80.8, 5503457, 'Finland', 2015], [37599, 81.9, 64395345, 'France', 2015], [44053, 81.1, 80688545, 'Germany', 2015], [42182, 82.8, 329425, 'Iceland', 2015], [5903, 66.8, 1311050527, 'India', 2015], [36162, 83.5, 126573481, 'Japan', 2015], [1390, 71.4, 25155317, 'North Korea', 2015], [34644, 80.7, 50293439, 'South Korea', 2015], [34186, 80.6, 4528526, 'New Zealand', 2015], [64304, 81.6, 5210967, 'Norway', 2015], [24787, 77.3, 38611794, 'Poland', 2015], [23038, 73.13, 143456918, 'Russia', 2015], [19360, 76.5, 78665830, 'Turkey', 2015], [38225, 81.4, 64715810, 'United Kingdom', 2015], [53354, 79.1, 321773631, 'United States', 2015]]
    ];
    return (
      <ScatterChart
        style={{ width: WIDTH, height: 300 }}
        xAxis={{}}
        yAxis={{ scale: true }}
        grid={{ left: 40, right: 130 }}
        series={[
          {
            name: '1990',
            data: data[0]!,
            type: 'scatter',
            symbolSize: (data) => Math.sqrt(data[2]) / 5e2,
            emphasis: { focus: 'self' },
            labelLayout: { y: 20, align: 'center', hideOverlap: true, moveOverlap: 'shiftX' },
            labelLine: { show: true, length2: 5, lineStyle: { color: '#bbb' } },
            label: { show: true, formatter: (param: any) => param.data[3], minMargin: 10, position: 'top' },
          },
        ]}
      />
    );
  },
};

// FIXME: animation
export const ScatterSymbolMorph: Story = {
  name: 'Symbol Shape Morph',
  render() {
    const xData: number[] = [];
    const yData: number[] = [];
    const data: [number, number, number][] = [];
    for (let y = 0; y < 10; y++) {
      yData.push(y);
      for (let x = 0; x < 10; x++) data.push([x, y, 10]);
    }
    for (let x = 0; x < 10; x++) xData.push(x);

    const symbols = [
      'roundRect',
      'circle',
      // heart
      'path://M23.6 2c-3.363 0-6.258 2.736-7.599 5.594-1.342-2.858-4.237-5.594-7.601-5.594-4.637 0-8.4 3.764-8.4 8.401 0 9.433 9.516 11.906 16.001 21.232 6.13-9.268 15.999-12.1 15.999-21.232 0-4.637-3.763-8.401-8.4-8.401z',
      // happy
      'path://M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM22 8c1.105 0 2 1.343 2 3s-0.895 3-2 3-2-1.343-2-3 0.895-3 2-3zM10 8c1.105 0 2 1.343 2 3s-0.895 3-2 3-2-1.343-2-3 0.895-3 2-3zM16 28c-5.215 0-9.544-4.371-10-9.947 2.93 1.691 6.377 2.658 10 2.658s7.070-0.963 10-2.654c-0.455 5.576-4.785 9.942-10 9.942z',
      // evil
      'path://M32 2c0-1.422-0.298-2.775-0.833-4-1.049 2.401-3.014 4.31-5.453 5.287-2.694-2.061-6.061-3.287-9.714-3.287s-7.021 1.226-9.714 3.287c-2.439-0.976-4.404-2.886-5.453-5.287-0.535 1.225-0.833 2.578-0.833 4 0 2.299 0.777 4.417 2.081 6.106-1.324 2.329-2.081 5.023-2.081 7.894 0 8.837 7.163 16 16 16s16-7.163 16-16c0-2.871-0.757-5.565-2.081-7.894 1.304-1.689 2.081-3.806 2.081-6.106zM18.003 11.891c0.064-1.483 1.413-2.467 2.55-3.036 1.086-0.543 2.16-0.814 2.205-0.826 0.536-0.134 1.079 0.192 1.213 0.728s-0.192 1.079-0.728 1.213c-0.551 0.139-1.204 0.379-1.779 0.667 0.333 0.357 0.537 0.836 0.537 1.363 0 1.105-0.895 2-2 2s-2-0.895-2-2c0-0.037 0.001-0.073 0.003-0.109zM8.030 8.758c0.134-0.536 0.677-0.862 1.213-0.728 0.045 0.011 1.119 0.283 2.205 0.826 1.137 0.569 2.486 1.553 2.55 3.036 0.002 0.036 0.003 0.072 0.003 0.109 0 1.105-0.895 2-2 2s-2-0.895-2-2c0-0.527 0.204-1.005 0.537-1.363-0.575-0.288-1.228-0.528-1.779-0.667-0.536-0.134-0.861-0.677-0.728-1.213zM16 26c-3.641 0-6.827-1.946-8.576-4.855l2.573-1.544c1.224 2.036 3.454 3.398 6.003 3.398s4.779-1.362 6.003-3.398l2.573 1.544c-1.749 2.908-4.935 4.855-8.576 4.855z',
      // hipster
      'path://M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM22 8c1.105 0 2 0.895 2 2s-0.895 2-2 2-2-0.895-2-2 0.895-2 2-2zM10 8c1.105 0 2 0.895 2 2s-0.895 2-2 2-2-0.895-2-2 0.895-2 2-2zM16.994 21.23c-0.039-0.035-0.078-0.072-0.115-0.109-0.586-0.586-0.878-1.353-0.879-2.121-0 0.768-0.293 1.535-0.879 2.121-0.038 0.038-0.076 0.074-0.115 0.109-2.704 2.453-9.006-0.058-9.006-3.23 1.938 1.25 3.452 0.306 4.879-1.121 1.172-1.172 3.071-1.172 4.243 0 0.586 0.586 0.879 1.353 0.879 2.121 0-0.768 0.293-1.535 0.879-2.121 1.172-1.172 3.071-1.172 4.243 0 1.427 1.427 2.941 2.371 4.879 1.121 0 3.173-6.302 5.684-9.006 3.23z',
      // shocked
      'path://M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM10 14c-1.105 0-2-1.343-2-3s0.895-3 2-3 2 1.343 2 3-0.895 3-2 3zM16 26c-2.209 0-4-1.791-4-4s1.791-4 4-4c2.209 0 4 1.791 4 4s-1.791 4-4 4zM22 14c-1.105 0-2-1.343-2-3s0.895-3 2-3 2 1.343 2 3-0.895 3-2 3z',
      // pie chart
      'path://M14 18v-14c-7.732 0-14 6.268-14 14s6.268 14 14 14 14-6.268 14-14c0-2.251-0.532-4.378-1.476-6.262l-12.524 6.262zM28.524 7.738c-2.299-4.588-7.043-7.738-12.524-7.738v14l12.524-6.262z',
      // users
      'path://M10.225 24.854c1.728-1.13 3.877-1.989 6.243-2.513-0.47-0.556-0.897-1.176-1.265-1.844-0.95-1.726-1.453-3.627-1.453-5.497 0-2.689 0-5.228 0.956-7.305 0.928-2.016 2.598-3.265 4.976-3.734-0.529-2.39-1.936-3.961-5.682-3.961-6 0-6 4.029-6 9 0 3.096 1.797 6.191 4 7.432v1.649c-6.784 0.555-12 3.888-12 7.918h8.719c0.454-0.403 0.956-0.787 1.506-1.146zM24 24.082v-1.649c2.203-1.241 4-4.337 4-7.432 0-4.971 0-9-6-9s-6 4.029-6 9c0 3.096 1.797 6.191 4 7.432v1.649c-6.784 0.555-12 3.888-12 7.918h28c0-4.030-5.216-7.364-12-7.918z',
      // mug
      'path://M30 10h-6v-3c0-2.761-5.373-5-12-5s-12 2.239-12 5v20c0 2.761 5.373 5 12 5s12-2.239 12-5v-3h6c1.105 0 2-0.895 2-2v-10c0-1.105-0.895-2-2-2zM5.502 8.075c-1.156-0.381-1.857-0.789-2.232-1.075 0.375-0.286 1.075-0.694 2.232-1.075 1.811-0.597 4.118-0.925 6.498-0.925s4.688 0.329 6.498 0.925c1.156 0.381 1.857 0.789 2.232 1.075-0.375 0.286-1.076 0.694-2.232 1.075-1.811 0.597-4.118 0.925-6.498 0.925s-4.688-0.329-6.498-0.925zM28 20h-4v-6h4v6z',
      // plane
      'path://M24 19.999l-5.713-5.713 13.713-10.286-4-4-17.141 6.858-5.397-5.397c-1.556-1.556-3.728-1.928-4.828-0.828s-0.727 3.273 0.828 4.828l5.396 5.396-6.858 17.143 4 4 10.287-13.715 5.713 5.713v7.999h4l2-6 6-2v-4l-7.999 0z',
    ];

    const [symbol, setSymbol] = React.useState(symbols[0]!);

    React.useEffect(() => {
      let index = 0;
      const timer = setInterval(() => {
        setSymbol(symbols[++index % symbols.length]!);
      }, 700);
      return () => clearInterval(timer);
    }, []);

    return (
      <ScatterChart
        style={{ width: 500, height: 500 }}
        grid={{ left: 0, right: 0, top: 0, bottom: 0 }}
        xAxis={{ show: false, type: 'category', data: xData }}
        yAxis={{ show: false, type: 'category', data: yData }}
        series={[
          {
            type: 'scatter',
            data,
            symbol,
            symbolKeepAspect: true,
            universalTransition: true,
            symbolSize: 50,
          },
        ]}
      />
    );
  },
};

export const BubbleGradient: Story = {
  name: 'Bubble Chart',
  render() {
    const data = [
      [
        [28604, 77, 17096869, 'Australia', 1990],
        [31163, 77.4, 27662440, 'Canada', 1990],
        [1516, 68, 1154605773, 'China', 1990],
        [13670, 74.7, 10582082, 'Cuba', 1990],
        [28599, 75, 4986705, 'Finland', 1990],
        [29476, 77.1, 56943299, 'France', 1990],
        [31476, 75.4, 78958237, 'Germany', 1990],
        [28666, 78.1, 254830, 'Iceland', 1990],
        [1777, 57.7, 870601776, 'India', 1990],
        [29550, 79.1, 122249285, 'Japan', 1990],
        [2076, 67.9, 20194354, 'North Korea', 1990],
        [12087, 72, 42972254, 'South Korea', 1990],
        [24021, 75.4, 3397534, 'New Zealand', 1990],
        [43296, 76.8, 4240375, 'Norway', 1990],
        [10088, 70.8, 38195258, 'Poland', 1990],
        [19349, 69.6, 147568552, 'Russia', 1990],
        [10670, 67.3, 53994605, 'Turkey', 1990],
        [26424, 75.7, 57110117, 'United Kingdom', 1990],
        [37062, 75.4, 252847810, 'United States', 1990],
      ],
      [
        [44056, 81.8, 23968973, 'Australia', 2015],
        [43294, 81.7, 35939927, 'Canada', 2015],
        [13334, 76.9, 1376048943, 'China', 2015],
        [21291, 78.5, 11389562, 'Cuba', 2015],
        [38923, 80.8, 5503457, 'Finland', 2015],
        [37599, 81.9, 64395345, 'France', 2015],
        [44053, 81.1, 80688545, 'Germany', 2015],
        [42182, 82.8, 329425, 'Iceland', 2015],
        [5903, 66.8, 1311050527, 'India', 2015],
        [36162, 83.5, 126573481, 'Japan', 2015],
        [1390, 71.4, 25155317, 'North Korea', 2015],
        [34644, 80.7, 50293439, 'South Korea', 2015],
        [34186, 80.6, 4528526, 'New Zealand', 2015],
        [64304, 81.6, 5210967, 'Norway', 2015],
        [24787, 77.3, 38611794, 'Poland', 2015],
        [23038, 73.13, 143456918, 'Russia', 2015],
        [19360, 76.5, 78665830, 'Turkey', 2015],
        [38225, 81.4, 64715810, 'United Kingdom', 2015],
        [53354, 79.1, 321773631, 'United States', 2015],
      ],
    ];

    return (
      <ScatterChart
        style={{ width: 480, height: 300 }}
        backgroundColor={
          new echarts.graphic.RadialGradient(0.3, 0.3, 0.8, [
            { offset: 0, color: '#f7f8fa' },
            { offset: 1, color: '#cdd0d5' },
          ])
        }
        grid={{ left: '8%', top: '10%' }}
        xAxis={{ splitLine: { lineStyle: { type: 'dashed' } } }}
        yAxis={{ splitLine: { lineStyle: { type: 'dashed' } }, scale: true }}
        series={[
          {
            name: '1990',
            data: data[0]!,
            type: 'scatter',
            symbolSize: (data) => Math.sqrt(data[2]) / 5e2,
            emphasis: {
              focus: 'series',
              label: { show: true, formatter: (param: any) => param.data[3], position: 'top' },
            },
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(120, 36, 50, 0.5)',
              shadowOffsetY: 5,
              color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
                { offset: 0, color: 'rgb(251, 118, 123)' },
                { offset: 1, color: 'rgb(204, 46, 72)' },
              ]),
            },
          },
          {
            name: '2015',
            data: data[1]!,
            type: 'scatter',
            symbolSize: (data) => Math.sqrt(data[2]) / 5e2,
            emphasis: {
              focus: 'series',
              label: { show: true, formatter: (param: any) => param.data[3], position: 'top' },
            },
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(25, 100, 150, 0.5)',
              shadowOffsetY: 5,
              color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
                { offset: 0, color: 'rgb(129, 227, 238)' },
                { offset: 1, color: 'rgb(25, 183, 207)' },
              ]),
            },
          },
        ]}
      >
        <Title title={{ text: 'Life Expectancy and GDP by Country', left: '5%', top: '3%' }} />
        <Legend legend={{ right: '10%', top: '3%', data: ['1990', '2015'] }} />
      </ScatterChart>
    );
  },
};

export const ScatterAqiColor: Story = {
  name: 'Scatter AQI Color',
  render() {
    const dataBJ = [
      [1, 55, 9, 56, 0.46, 18, 6, '良'],
      [2, 25, 11, 21, 0.65, 34, 9, '优'],
      [3, 56, 7, 63, 0.3, 14, 5, '良'],
      [4, 33, 7, 29, 0.33, 16, 6, '优'],
      [5, 42, 24, 44, 0.76, 40, 16, '优'],
      [6, 82, 58, 90, 1.77, 68, 33, '良'],
      [7, 74, 49, 77, 1.46, 48, 27, '良'],
      [8, 78, 55, 80, 1.29, 59, 29, '良'],
      [9, 267, 216, 280, 4.8, 108, 64, '重度污染'],
      [10, 185, 127, 216, 2.52, 61, 27, '中度污染'],
      [11, 39, 19, 38, 0.57, 31, 15, '优'],
      [12, 41, 11, 40, 0.43, 21, 7, '优'],
      [13, 64, 38, 74, 1.04, 46, 22, '良'],
      [14, 108, 79, 120, 1.7, 75, 41, '轻度污染'],
      [15, 108, 63, 116, 1.48, 44, 26, '轻度污染'],
      [16, 33, 6, 29, 0.34, 13, 5, '优'],
      [17, 94, 66, 110, 1.54, 62, 31, '良'],
      [18, 186, 142, 192, 3.88, 93, 79, '中度污染'],
      [19, 57, 31, 54, 0.96, 32, 14, '良'],
      [20, 22, 8, 17, 0.48, 23, 10, '优'],
      [21, 39, 15, 36, 0.61, 29, 13, '优'],
      [22, 94, 69, 114, 2.08, 73, 39, '良'],
      [23, 99, 73, 110, 2.43, 76, 48, '良'],
      [24, 31, 12, 30, 0.5, 32, 16, '优'],
      [25, 42, 27, 43, 1, 53, 22, '优'],
      [26, 154, 117, 157, 3.05, 92, 58, '中度污染'],
      [27, 234, 185, 230, 4.09, 123, 69, '重度污染'],
      [28, 160, 120, 186, 2.77, 91, 50, '中度污染'],
      [29, 134, 96, 165, 2.76, 83, 41, '轻度污染'],
      [30, 52, 24, 60, 1.03, 50, 21, '良'],
      [31, 46, 5, 49, 0.28, 10, 6, '优'],
    ];
    const dataGZ = [
      [1, 26, 37, 27, 1.163, 27, 13, '优'],
      [2, 85, 62, 71, 1.195, 60, 8, '良'],
      [3, 78, 38, 74, 1.363, 37, 7, '良'],
      [4, 21, 21, 36, 0.634, 40, 9, '优'],
      [5, 41, 42, 46, 0.915, 81, 13, '优'],
      [6, 56, 52, 69, 1.067, 92, 16, '良'],
      [7, 64, 30, 28, 0.924, 51, 2, '良'],
      [8, 55, 48, 74, 1.236, 75, 26, '良'],
      [9, 76, 85, 113, 1.237, 114, 27, '良'],
      [10, 91, 81, 104, 1.041, 56, 40, '良'],
      [11, 84, 39, 60, 0.964, 25, 11, '良'],
      [12, 64, 51, 101, 0.862, 58, 23, '良'],
      [13, 70, 69, 120, 1.198, 65, 36, '良'],
      [14, 77, 105, 178, 2.549, 64, 16, '良'],
      [15, 109, 68, 87, 0.996, 74, 29, '轻度污染'],
      [16, 73, 68, 97, 0.905, 51, 34, '良'],
      [17, 54, 27, 47, 0.592, 53, 12, '良'],
      [18, 51, 61, 97, 0.811, 65, 19, '良'],
      [19, 91, 71, 121, 1.374, 43, 18, '良'],
      [20, 73, 102, 182, 2.787, 44, 19, '良'],
      [21, 73, 50, 76, 0.717, 31, 20, '良'],
      [22, 84, 94, 140, 2.238, 68, 18, '良'],
      [23, 93, 77, 104, 1.165, 53, 7, '良'],
      [24, 99, 130, 227, 3.97, 55, 15, '良'],
      [25, 146, 84, 139, 1.094, 40, 17, '轻度污染'],
      [26, 113, 108, 137, 1.481, 48, 15, '轻度污染'],
      [27, 81, 48, 62, 1.619, 26, 3, '良'],
      [28, 56, 48, 68, 1.336, 37, 9, '良'],
      [29, 82, 92, 174, 3.29, 0, 13, '良'],
      [30, 106, 116, 188, 3.628, 101, 16, '轻度污染'],
      [31, 118, 50, 0, 1.383, 76, 11, '轻度污染'],
    ];
    const dataSH = [
      [1, 91, 45, 125, 0.82, 34, 23, '良'],
      [2, 65, 27, 78, 0.86, 45, 29, '良'],
      [3, 83, 60, 84, 1.09, 73, 27, '良'],
      [4, 109, 81, 121, 1.28, 68, 51, '轻度污染'],
      [5, 106, 77, 114, 1.07, 55, 51, '轻度污染'],
      [6, 109, 81, 121, 1.28, 68, 51, '轻度污染'],
      [7, 106, 77, 114, 1.07, 55, 51, '轻度污染'],
      [8, 89, 65, 78, 0.86, 51, 26, '良'],
      [9, 53, 33, 47, 0.64, 50, 17, '良'],
      [10, 80, 55, 80, 1.01, 75, 24, '良'],
      [11, 117, 81, 124, 1.03, 45, 24, '轻度污染'],
      [12, 99, 71, 142, 1.1, 62, 42, '良'],
      [13, 95, 69, 130, 1.28, 74, 50, '良'],
      [14, 116, 87, 131, 1.47, 84, 40, '轻度污染'],
      [15, 108, 80, 121, 1.3, 85, 37, '轻度污染'],
      [16, 134, 83, 167, 1.16, 57, 43, '轻度污染'],
      [17, 79, 43, 107, 1.05, 59, 37, '良'],
      [18, 71, 46, 89, 0.86, 64, 25, '良'],
      [19, 97, 71, 113, 1.17, 88, 31, '良'],
      [20, 84, 57, 91, 0.85, 55, 31, '良'],
      [21, 87, 63, 101, 0.9, 56, 41, '良'],
      [22, 104, 77, 119, 1.09, 73, 48, '轻度污染'],
      [23, 87, 62, 100, 1, 72, 28, '良'],
      [24, 168, 128, 172, 1.49, 97, 56, '中度污染'],
      [25, 65, 45, 51, 0.74, 39, 17, '良'],
      [26, 39, 24, 38, 0.61, 47, 17, '优'],
      [27, 39, 24, 39, 0.59, 50, 19, '优'],
      [28, 93, 68, 96, 1.05, 79, 29, '良'],
      [29, 188, 143, 197, 1.66, 99, 51, '中度污染'],
      [30, 174, 131, 174, 1.55, 108, 50, '中度污染'],
      [31, 187, 143, 201, 1.39, 89, 53, '中度污染'],
    ];
    const schema = [
      { name: 'date', index: 0, text: '日' },
      { name: 'AQIindex', index: 1, text: 'AQI指数' },
      { name: 'PM25', index: 2, text: 'PM2.5' },
      { name: 'PM10', index: 3, text: 'PM10' },
      { name: 'CO', index: 4, text: '一氧化碳（CO）' },
      { name: 'NO2', index: 5, text: '二氧化氮（NO2）' },
      { name: 'SO2', index: 6, text: '二氧化硫（SO2）' },
    ];
    const itemStyle = {
      opacity: 0.8,
      shadowBlur: 10,
      shadowOffsetX: 0,
      shadowOffsetY: 0,
      shadowColor: 'rgba(0,0,0,0.3)',
    };

    return (
      <ScatterChart
        style={{ width: 600, height: 400 }}
        color={['#dd4444', '#fec42c', '#80F1BE']}
        grid={{ left: '10%', right: 150, top: '18%', bottom: '10%' }}
        xAxis={{
          type: 'value',
          name: '日期',
          nameGap: 16,
          nameTextStyle: { fontSize: 16 },
          max: 31,
          splitLine: { show: false },
        }}
        yAxis={{
          type: 'value',
          name: 'AQI指数',
          nameLocation: 'end',
          nameGap: 20,
          nameTextStyle: { fontSize: 16 },
          splitLine: { show: false },
        }}
        series={[
          { name: '北京', type: 'scatter', itemStyle: itemStyle, data: dataBJ },
          { name: '上海', type: 'scatter', itemStyle: itemStyle, data: dataSH },
          { name: '广州', type: 'scatter', itemStyle: itemStyle, data: dataGZ },
        ]}
      >
        <Legend
          legend={{
            top: 10,
            data: ['北京', '上海', '广州'],
            textStyle: { fontSize: 16 },
          }}
        />
        <Tooltip
          tooltip={{
            backgroundColor: 'rgba(255,255,255,0.7)',
            formatter: function (param: any) {
              var value = param.value;
              // prettier-ignore
              return '<div style="border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px">'
                + param.seriesName + ' ' + value[0] + '日：'
                + value[7]
                + '</div>'
                + schema[1]!.text + '：' + value[1] + '<br>'
                + schema[2]!.text + '：' + value[2] + '<br>'
                + schema[3]!.text + '：' + value[3] + '<br>'
                + schema[4]!.text + '：' + value[4] + '<br>'
                + schema[5]!.text + '：' + value[5] + '<br>'
                + schema[6]!.text + '：' + value[6] + '<br>';
            },
          }}
        />
        <VisualMap
          visualMap={[
            {
              left: 'right',
              top: '10%',
              dimension: 2,
              min: 0,
              max: 250,
              itemWidth: 30,
              itemHeight: 120,
              calculable: true,
              precision: 0.1,
              text: ['圆形大小：PM2.5'],
              textGap: 30,
              inRange: { symbolSize: [10, 70] },
              outOfRange: { symbolSize: [10, 70], color: ['rgba(255,255,255,0.4)'] },
              controller: { inRange: { color: ['#c23531'] }, outOfRange: { color: ['#999'] } },
            },
            {
              left: 'right',
              bottom: '5%',
              dimension: 6,
              min: 0,
              max: 50,
              itemHeight: 120,
              text: ['明暗：二氧化硫'],
              textGap: 30,
              inRange: { colorLightness: [0.9, 0.5] },
              outOfRange: { color: ['rgba(255,255,255,0.4)'] },
              controller: { inRange: { color: ['#c23531'] }, outOfRange: { color: ['#999'] } },
            },
          ]}
        />
      </ScatterChart>
    );
  },
};

export const ScatterPolarPunchCard: Story = {
  name: 'Punch Card of GitHub',
  render() {
    // prettier-ignore
    const hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a', '9a', '10a', '11a', '12p', '1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p', '10p', '11p'];
    // prettier-ignore
    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];
    // prettier-ignore
    const data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];

    return (
      <ScatterChart
        style={{ width: 480, height: 300 }}
        series={[
          {
            name: 'Punch Card',
            type: 'scatter',
            coordinateSystem: 'polar',
            symbolSize: (val) => val[2] * 2,
            data,
            animationDelay: (idx) => idx * 5,
          },
        ]}
      >
        <Title title={{ text: 'Punch Card of GitHub' }} />
        <Legend legend={{ data: ['Punch Card'], left: 'right' }} />
        <Polar
          polar={{}}
          angleAxis={{
            type: 'category',
            data: hours,
            boundaryGap: false,
            splitLine: { show: true },
            axisLine: { show: false },
          }}
          radiusAxis={{ type: 'category', data: days, axisLine: { show: false }, axisLabel: { rotate: 45 } }}
        />
        <Tooltip
          tooltip={{
            formatter: (params: any) =>
              params.value[2] + ' commits in ' + hours[params.value[1]] + ' of ' + days[params.value[0]],
          }}
        />
      </ScatterChart>
    );
  },
};

export const CalendarCharts: Story = {
  name: 'Calendar Charts',
  render() {
    function getVirtualData(year: string | number) {
      const date = +echarts.time.parse(year + '-01-01');
      const end = +echarts.time.parse(+year + 1 + '-01-01');
      const dayTime = 3600 * 24 * 1000;
      const data = [];
      for (let time = date; time < end; time += dayTime) {
        data.push([echarts.time.format(time, '{yyyy}-{MM}-{dd}', false), Math.floor(Math.random() * 1000)]);
      }
      return data;
    }
    const graphData = [
      ['2017-02-01', 260],
      ['2017-02-04', 200],
      ['2017-02-09', 279],
      ['2017-02-13', 847],
      ['2017-02-18', 241],
      ['2017-02-23', 411],
      ['2017-02-27', 985],
    ];
    const links = graphData.map((_item, idx) => ({ source: idx, target: idx + 1 }));
    links.pop();

    return (
      <ScatterChart
        compose={[EffectScatterChart, GraphChart, HeatmapChart]}
        style={{ width: 800, height: 700 }}
        series={[
          {
            type: 'graph',
            edgeSymbol: ['none', 'arrow'],
            coordinateSystem: 'calendar',
            links: links,
            symbolSize: 10,
            calendarIndex: 0,
            data: graphData,
          },
          {
            type: 'heatmap',
            coordinateSystem: 'calendar',
            data: getVirtualData('2017'),
          },
          {
            type: 'effectScatter',
            coordinateSystem: 'calendar',
            calendarIndex: 1,
            symbolSize: function (val) {
              return val[1] / 40;
            },
            data: getVirtualData('2017'),
          },
          {
            type: 'scatter',
            coordinateSystem: 'calendar',
            calendarIndex: 2,
            symbolSize: function (val) {
              return val[1] / 60;
            },
            data: getVirtualData('2017'),
          },
          {
            type: 'heatmap',
            coordinateSystem: 'calendar',
            calendarIndex: 3,
            data: getVirtualData('2017'),
          },
        ]}
      >
        <Tooltip tooltip={{ position: 'top' }} />
        <VisualMap
          visualMap={[
            {
              min: 0,
              max: 1000,
              calculable: true,
              seriesIndex: [2, 3, 4],
              orient: 'horizontal',
              left: '55%',
              bottom: 20,
            },
            {
              min: 0,
              max: 1000,
              inRange: { color: ['grey'], opacity: [0, 0.3] },
              controller: { inRange: { opacity: [0.3, 0.6] }, outOfRange: { color: '#ccc' } },
              seriesIndex: [1],
              orient: 'horizontal',
              left: '10%',
              bottom: 20,
            },
          ]}
        />
        <Calendar
          calendar={[
            {
              orient: 'vertical',
              yearLabel: { margin: 40 },
              monthLabel: { nameMap: 'cn', margin: 20 },
              dayLabel: { firstDay: 1, nameMap: 'cn' },
              cellSize: 40,
              range: '2017-02',
            },
            {
              orient: 'vertical',
              yearLabel: { margin: 40 },
              monthLabel: { margin: 20 },
              cellSize: 40,
              left: 460,
              range: '2017-01',
            },
            {
              orient: 'vertical',
              yearLabel: { margin: 40 },
              monthLabel: { margin: 20 },
              cellSize: 40,
              top: 350,
              range: '2017-03',
            },
            {
              orient: 'vertical',
              yearLabel: { margin: 40 },
              dayLabel: { firstDay: 1, nameMap: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] },
              monthLabel: { nameMap: 'cn', margin: 20 },
              cellSize: 40,
              top: 350,
              left: 460,
              range: '2017-04',
            },
          ]}
        />
      </ScatterChart>
    );
  },
};
